// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: job.proto

package jobpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// message sent from orchestrator
type JobRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	JobId          string                 `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`                   // unique tracking id for job
	RepoUrl        string                 `protobuf:"bytes,2,opt,name=repoUrl,proto3" json:"repoUrl,omitempty"`               // github repo to clone
	Branch         string                 `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`                 // branch of the repo to be cloned
	DockerfilePath string                 `protobuf:"bytes,4,opt,name=dockerfilePath,proto3" json:"dockerfilePath,omitempty"` // docker file path to build the image
	ContextDir     string                 `protobuf:"bytes,5,opt,name=contextDir,proto3" json:"contextDir,omitempty"`         // context dir path
	ImageName      string                 `protobuf:"bytes,6,opt,name=imageName,proto3" json:"imageName,omitempty"`           // image name to be set
	GithubToken    string                 `protobuf:"bytes,7,opt,name=githubToken,proto3" json:"githubToken,omitempty"`       // github token to clone private repo
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *JobRequest) Reset() {
	*x = JobRequest{}
	mi := &file_job_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRequest) ProtoMessage() {}

func (x *JobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_job_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRequest.ProtoReflect.Descriptor instead.
func (*JobRequest) Descriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{0}
}

func (x *JobRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobRequest) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *JobRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *JobRequest) GetDockerfilePath() string {
	if x != nil {
		return x.DockerfilePath
	}
	return ""
}

func (x *JobRequest) GetContextDir() string {
	if x != nil {
		return x.ContextDir
	}
	return ""
}

func (x *JobRequest) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *JobRequest) GetGithubToken() string {
	if x != nil {
		return x.GithubToken
	}
	return ""
}

// returned by the worker to orhcestrator
type JobResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Logs          string                 `protobuf:"bytes,3,opt,name=logs,proto3" json:"logs,omitempty"`         // logs (stdout/stderr during build)
	ImageUrl      string                 `protobuf:"bytes,4,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"` // full ECR image url
	Error         string                 `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`       // error message if any
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobResponse) Reset() {
	*x = JobResponse{}
	mi := &file_job_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobResponse) ProtoMessage() {}

func (x *JobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_job_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobResponse.ProtoReflect.Descriptor instead.
func (*JobResponse) Descriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{1}
}

func (x *JobResponse) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *JobResponse) GetLogs() string {
	if x != nil {
		return x.Logs
	}
	return ""
}

func (x *JobResponse) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *JobResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_job_proto protoreflect.FileDescriptor

const file_job_proto_rawDesc = "" +
	"\n" +
	"\tjob.proto\x12\x03job\"\xdc\x01\n" +
	"\n" +
	"JobRequest\x12\x14\n" +
	"\x05jobId\x18\x01 \x01(\tR\x05jobId\x12\x18\n" +
	"\arepoUrl\x18\x02 \x01(\tR\arepoUrl\x12\x16\n" +
	"\x06branch\x18\x03 \x01(\tR\x06branch\x12&\n" +
	"\x0edockerfilePath\x18\x04 \x01(\tR\x0edockerfilePath\x12\x1e\n" +
	"\n" +
	"contextDir\x18\x05 \x01(\tR\n" +
	"contextDir\x12\x1c\n" +
	"\timageName\x18\x06 \x01(\tR\timageName\x12 \n" +
	"\vgithubToken\x18\a \x01(\tR\vgithubToken\"\x83\x01\n" +
	"\vJobResponse\x12\x14\n" +
	"\x05jobId\x18\x01 \x01(\tR\x05jobId\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x12\n" +
	"\x04logs\x18\x03 \x01(\tR\x04logs\x12\x1a\n" +
	"\bimageUrl\x18\x04 \x01(\tR\bimageUrl\x12\x14\n" +
	"\x05error\x18\x05 \x01(\tR\x05error29\n" +
	"\n" +
	"JobService\x12+\n" +
	"\x06RunJob\x12\x0f.job.JobRequest\x1a\x10.job.JobResponseB#Z!build-worker/internal/proto;jobpbb\x06proto3"

var (
	file_job_proto_rawDescOnce sync.Once
	file_job_proto_rawDescData []byte
)

func file_job_proto_rawDescGZIP() []byte {
	file_job_proto_rawDescOnce.Do(func() {
		file_job_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_job_proto_rawDesc), len(file_job_proto_rawDesc)))
	})
	return file_job_proto_rawDescData
}

var file_job_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_job_proto_goTypes = []any{
	(*JobRequest)(nil),  // 0: job.JobRequest
	(*JobResponse)(nil), // 1: job.JobResponse
}
var file_job_proto_depIdxs = []int32{
	0, // 0: job.JobService.RunJob:input_type -> job.JobRequest
	1, // 1: job.JobService.RunJob:output_type -> job.JobResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_job_proto_init() }
func file_job_proto_init() {
	if File_job_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_job_proto_rawDesc), len(file_job_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_job_proto_goTypes,
		DependencyIndexes: file_job_proto_depIdxs,
		MessageInfos:      file_job_proto_msgTypes,
	}.Build()
	File_job_proto = out.File
	file_job_proto_goTypes = nil
	file_job_proto_depIdxs = nil
}
